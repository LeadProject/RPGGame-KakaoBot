importClass(java.lang.Thread);
const BufferedReader = java.io.BufferedReader;
const DataOutputStream = java.io.DataOutputStream;
const InputStreamReader = java.io.InputStreamReader;
const HttpURLConnection = java.net.HttpURLConnection;
const XMLHttpRequest = java.net.XMLHttpRequest;
const URL = java.net.URL;
const URLEncoder = java.net.URLEncoder;
importClass(java.io.File);
importClass(org.jsoup.Jsoup);

const sdcard = android.os.Environment.getExternalStorageDirectory().getAbsolutePath();
const Config = JSON.parse(FileStream.read("sdcard/rpg_config.json"));
const VERSION = Config["Version"];
const PREFIX = Config["Prefix"];
const blank = "\u200b".repeat(500);
const RPG_SETTING = "sdcard/[RPG]/Setting/";
const RPG_SKILL = "sdcard/[RPG]/Setting/Skill/";
const RPG_USER = "sdcard/[RPG]/USER/";
const RPG_ROOM = Config["MainRoom"];

const hurt = {};

const MapRPG = {};
const NBT = {};

const skinCreate = {};
const skinType = {};
const skin = {};

const Party = [];
const Partys = [];
const PartyUser = [];
const PartyLock = [];
const PartyInvite = [];

const toTalk = {};
const toWhat = {};
const that = {};
const seanpc = {};
const npctalk = {};
const battlenpc = {};
const npcmsg = {};

const npc = {};
const npcJob = {};
const npcBuyname = {};
const npcBuyprice = {};
const npcBuyatk = {};
const npcBuydef = {};
const npctype = {};
const npcSay = {};
const npcC = {};
const npcCheck = {};

const mob = {};

const c = {};

const ITEM = JSON.parse(FileStream.read(RPG_SETTING + "items.json"));
//const QUEST = JSON.parse(FileStream.read(RPG_SETTING + "quests.json"));
const MONSTER = RPG_SETTING + "Monsters/";
//const MAP = JSON.parse(FileStream.read(RPG_SETTING + "map.json"))

const BAR_1 = "ùÑÄ";
const BAR_2 = ":";
const BAR_3 = "Œô";
const BAR_4 = "|";
const BAR_5 = "‚∏Ω";

/* Player Action */
const PlayerAction = {};
const PlayerYN = {};

const mhp = {};

const math = Bridge.getScopeOf("math.js");

function setHealthBar(health,max,tag,percent){
    if(typeof health != "number" || !health) return false;
    if(typeof max != "number" || !health) return false;
    let hpTmp = health;
    let perHp = max/10;
    let result = "";
    for(i=0; i>-1; i++){
        if(health<perHp){
        var perHp8 = perHp/8;
            if(health<perHp8){
            }
            else if(perHp8<=health && health<perHp8*2){
                result += "‚ñè";
            }
            else if(perHp8*2<=health && health < perHp8*3){
                result += "‚ñé";
            }
            else if(perHp8*3<=health && health < perHp8*4){
                result += "‚ñç";
            }
            else if(perHp8*4<=health && health < perHp8*5){
                result += "‚ñå";
            }
            else if(perHp8*5<=health && health < perHp8*6){
                result += "‚ñã"
            }
            else if(perHp8*6<=health && health < perHp8*7){
                result += "‚ñä";
            }
            else if(perHp8*7<=health && health < perHp8*8){
                result += "‚ñâ";
            }
            break;
            }
        health -= perHp;
        result += "‚ñà";
    }
    if(!percent){
        result = tag+": ("+hpTmp+"/"+max+")\n"+result;
    }
    else{
        result = tag+": "+((hpTmp/max)*100).toFixed(2)+"%\n"+result;
    }
    return result;
}
function rm(msg, room) {
	//var timea = new Date().getTime();
    if (room == undefined) room = RPG_ROOM;
    Api.replyRoom(room, PREFIX + msg);
    /*var timeb = new Date().getTime();
    var ms = (timeb - timea);
    Api.replyRoom(room, "ÏùëÎãµÏÜçÎèÑ: " + ms + "ms");*/
}
objectBar = function(objectMin, objectMax, bar) {
    var length = 10;
    var value = objectMin;
    var max = objectMax;
    var per = Math.floor(value / max * length);
    var result = bar.repeat(per) + " ".repeat(max + per) + bar;

    return result;
}

function JSONSave(file, obj) {
    FileStream.write(file, JSONClean(obj));
}

function makeMob() {
    for (var i = 10; i <= 118; i++) {
        var fileon = "<?php\n\ndeclare(strict_types=1);\n\nnamespace LEADTV\\HexaMonster\\entity;\n\nuse pocketmine\\entity\\Monster;\nuse pocketmine\\entity\\Entity;\n\nclass CustomMob_" + i + " extends Monster{\n\n   public $networkId = " + i + ";\n   public const NETWORK_ID = " + i + ";\n   public $realName;\n   public $skill = 'Ìûê';\n   public $monsterSpeed = 0.4;\n   public $width = 0.6;\n   public $height = 1.95;\n\n\n   public function getRealName(){\n      return $this->realName;\n   }\n\n   public function setRealName($name){\n      $this->realName = $name;\n   }\n    public function getName() : string{\n    return 'CustomMob_" + i + "';\n    }\n}";
        FileStream.write("sdcard/Mobs/CustomMob_" + i + ".php", fileon);
    }
}

function user(target, res, to) {
    var Data = data(target);
    Data[res] = to;
    var result = JSONClean(Data);
    var write = FileStream.write(RPG_USER + target + ".json", result);
    return write;
}

function read(target) {
    return JSON.parse(FileStream.read(RPG_USER + target + ".json"));
}

function write(target, res) {
    var result = JSONClean(res);
    var write = FileStream.write(RPG_USER + target + ".json", result);
    return write;
}

function data(target) {
    return JSON.parse(FileStream.read(RPG_USER + target + ".json"));
}

function addInventory(player, item) {
    try {
        var Inv = JSON.parse(FileStream.read(RPG_USER + "INVENTORY/data/" + player + ".json"));
        Inv[item] = {};
        Inv[item]["Durability"] = ITEM[item]["Durability"];
        var finalData = JSONClean(Inv);
        FileStream.write(RPG_USER + "INVENTORY/data/" + player + ".json", finalData);

        var Inv = JSON.parse(FileStream.read(RPG_USER + "INVENTORY/" + player + ".json"));
        Inv.push(item);
        var finalData = JSONClean(Inv);
        FileStream.write(RPG_USER + "INVENTORY/" + player + ".json", finalData);
    } catch (e) {
        var Inv = JSON.parse(FileStream.read(RPG_USER + "INVENTORY/" + player + ".json"));
        Inv.push(item);
        var finalData = JSONClean(Inv);
        FileStream.write(RPG_USER + "INVENTORY/" + player + ".json", finalData);
    }
}

function removeInventory(player, item, type) {
    if (type == undefined) type = "ÏóÜÏùå";
    if (isItem(item) == "true") {
        if (ITEM[item]["Durability"] !== undefined) {
            var ItemData = getDataInventory(player);
            delete ItemData[item];
            var finalData = JSONClean(ItemData);
            FileStream.write(RPG_USER + "INVENTORY/data/" + player + ".json", finalData);

            var Inv = JSON.parse(FileStream.read(RPG_USER + "INVENTORY/" + player + ".json"));
            Inv.pop(item);
            var finalData = JSONClean(Inv);
            FileStream.write(RPG_USER + "INVENTORY/" + player + ".json", finalData);
        }
        if (type == "Ïû•Ï∞©") {
            var Inv = JSON.parse(FileStream.read(RPG_USER + "INVENTORY/" + player + ".json"));
            Inv.pop(item);
            var finalData = JSONClean(Inv);
            FileStream.write(RPG_USER + "INVENTORY/" + player + ".json", finalData);
        }
    }
    var Inv = JSON.parse(FileStream.read(RPG_USER + "INVENTORY/" + player + ".json"));
    Inv.pop(item);
    var finalData = JSONClean(Inv);
    FileStream.write(RPG_USER + "INVENTORY/" + player + ".json", finalData);
}

function getInventory(player) {
    var Inv = JSON.parse(FileStream.read(RPG_USER + "INVENTORY/" + player + ".json"));
    return JSONClean(Inv);
}

function isItem(item) {
    if (ITEM[item] == undefined) {
        return "false";
    }
    if (ITEM[item] !== undefined) {
        return "true";
    }
}

function isDurabilityItem(item) {
    if (isItem(item) == "false") {
        return "false";
    }
    if (isItem(item) == "true") {
        if (ITEM[item]["Durability"] == undefined) {
            return "false";
        }
        if (ITEM[item]["Durability"] !== undefined) {
            return "true";
        }
    }
}

function getItemInfo(item) {
    var B = "- - - - - - - - - - - -";
    var Info = [];
    if (ITEM[item] == undefined) {
        Info.push(B);
        Info.push("¬∑ Ïù¥Î¶Ñ : " + item);
        Info.push("¬∑ ID : ?");
        Info.push(B);
    }
    if (ITEM[item] !== undefined) {
        if (ITEM[item]["type"] == "Ïû•ÎπÑ") {
            if (ITEM[item]["armor"] !== undefined) {
                Info.push(B);
                Info.push("¬∑ Ïù¥Î¶Ñ : " + ITEM[item]["name"]);
                Info.push("¬∑ ID : " + ITEM[item]["Id"]);
                Info.push("¬∑ ÌÉÄÏûÖ : " + ITEM[item]["type"]);
                Info.push("¬∑ ÎÇ¥Íµ¨ÎèÑ : ?/" + ITEM[item]["Durability"]);
                Info.push("¬∑ Î≥¥Ìò∏ : " + ITEM[item]["armor"]);
                Info.push(B);
            }
            if (ITEM[item]["damage"] !== undefined) {
                Info.push(B);
                Info.push("¬∑ Ïù¥Î¶Ñ : " + ITEM[item]["name"]);
                Info.push("¬∑ ID : " + ITEM[item]["Id"]);
                Info.push("¬∑ ÌÉÄÏûÖ : " + ITEM[item]["type"]);
                Info.push("¬∑ ÎÇ¥Íµ¨ÎèÑ : ?/" + ITEM[item]["Durability"]);
                Info.push("¬∑ Îç∞ÎØ∏ÏßÄ : " + ITEM[item]["damage"]);
                Info.push(B);
            }
        }
    }
    return Info.join("\n");
}

function GameToolInventory(player, room) {
    var inv = JSON.parse(FileStream.read(RPG_USER + "INVENTORY/" + player + ".json"));
    var res = [];
    var a = {};
    inv.map(function(s) {
        a[s.toSource()] = (isNaN(a[s.toSource()]) ? 0 : a[s.toSource()]) + 1;
    });
    for (var i = 0; i < inv.length; i++) {
    if (ITEM[inv[i]] == undefined){
    	res.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n["+i+"Î≤à Ïä¨Î°Ø] [?] " + inv[i] + " "+a[inv[i].toSource()]+"x");
    } else {
    	res.push("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n["+i+"Î≤à Ïä¨Î°Ø] ["+ITEM[inv[i]]["type"]+"] " + ITEM[inv[i]]["name"] + " "+a[inv[i].toSource()]+"x");
    }
    }
    rm("::::: " + sender + " ÎãòÏùò Ïù∏Î≤§ÌÜ†Î¶¨ :::::\n" + res.join("\n"), room);
}

function selectJob(player, job) {
    if (job == "ÎßàÎ≤ïÏÇ¨") {
        var sData = data(player);
        sData["JOB"] = "ÎßàÎ≤ïÏÇ¨";
        var finalData = JSONClean(sData);
        FileStream.write(RPG_USER + player + ".json", finalData);
    }
    if (job == "Ï†ÑÏÇ¨") {
        var sData = data(player);
        sData["JOB"] = "Ï†ÑÏÇ¨";
        var finalData = JSONClean(sData);
        FileStream.write(RPG_USER + player + ".json", finalData);
    }
    if (job == "Î≤ÑÏÑúÏª§") {
        var sData = data(player);
        sData["JOB"] = "Î≤ÑÏÑúÏª§";
        var finalData = JSONClean(sData);
        FileStream.write(RPG_USER + player + ".json", finalData);
    }
    return "| Ï†Ñ ÏßÅ |\n" + job + " ÏúºÎ°ú Ï†ÑÏßÅ ÌïòÏòÄÏäµÎãàÎã§.";
}

function useSkill(player, skill) {
    try {
        skill = JSON.parse(FileStream.read(RPG_SKILL + skill + ".json"));
        if (skill["damage"] !== 0) {
            mhp[player] -= skill["damage"];
            return "| Ïä§ÌÇ¨ ÏÇ¨Ïö© |\nÏù¥Î¶Ñ : " + skill["name"] + "\n¬∑ Î™¨Ïä§ÌÑ∞ÏóêÍ≤å " + skill["damage"] + " Îç∞ÎØ∏ÏßÄ Í≥µÍ≤©!";
        } else if (skill["hp"] !== 0) {
            var sData = data(player);
            sData["HP"] += skill["hp"]
            var finalData = JSONClean(sData);
            FileStream.write(RPG_USER + player + ".json", finalData);
            return "| Ïä§ÌÇ¨ ÏÇ¨Ïö© |\nÏù¥Î¶Ñ : " + skill["name"] + "\n¬∑ Ï≤¥Î†• " + skill["hp"] + " Ï∂©Ï†Ñ!";
        } else if (skill["mana"] !== 0) {
            var sData = data(player);
            sData["MANA"] += skill["mana"]
            var finalData = JSONClean(sData);
            FileStream.write(RPG_USER + player + ".json", finalData);
            return "| Ïä§ÌÇ¨ ÏÇ¨Ïö© |\nÏù¥Î¶Ñ : " + skill["name"] + "\n¬∑ ÎßàÎÇò " + skill["mana"] + " Ï∂©Ï†Ñ!";
        }
    } catch (e) {
        return "ÏóÜÎäî Ïä§ÌÇ¨ ÏûÖÎãàÎã§.";
    }
}

function Equipment(player, type, item) {
    if (getInventory(player).indexOf(item) == -1) {
        return "ÏïÑÏù¥ÌÖúÏù¥ ÏóÜÏäµÎãàÎã§.";
    }
    if (type == "Î®∏Î¶¨") {
        removeInventory(player, item, "Ïû•Ï∞©");
        var sData = data(player);
        sData["Head"] = item;
        var finalData = JSONClean(sData);
        FileStream.write(RPG_USER + player + ".json", finalData);
    }
    if (type == "Î™∏ÌÜµ") {
        removeInventory(player, item, "Ïû•Ï∞©");
        var sData = data(player);
        sData["Chestplate"] = item;
        var finalData = JSONClean(sData);
        FileStream.write(RPG_USER + player + ".json", finalData);
    }
    if (type == "Îã§Î¶¨") {
        removeInventory(player, item, "Ïû•Ï∞©");
        var sData = data(player);
        sData["Leggings"] = item;
        var finalData = JSONClean(sData);
        FileStream.write(RPG_USER + player + ".json", finalData);
    }
    if (type == "Î∞ú") {
        removeInventory(player, item, "Ïû•Ï∞©");
        var sData = data(player);
        sData["Boots"] = item;
        var finalData = JSONClean(sData);
        FileStream.write(RPG_USER + player + ".json", finalData);
    }
    if (type == "ÏÜê") {
        removeInventory(player, item, "Ïû•Ï∞©");
        var sData = data(player);
        sData["Hand"] = item;
        var finalData = JSONClean(sData);
        FileStream.write(RPG_USER + player + ".json", finalData);
    }
}

function seeShop(player, type, item) {
    var pd = data(player);
    var place = pd["PLACE"];
    var shop = JSON.parse(FileStream.read(RPG_SETTING + "Shop/" + place + ".json"));
    if (shop == null) {
        return "ÏÉÅÏ†êÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§.";
    }
    if (type == "sell") {
        if (shop["sells"].indexOf(item) == -1) {
            return item + " ÏïÑÏù¥ÌÖúÏùÄ ÌåêÎß§ Ìï†Ïàò ÏóÜÏäµÎãàÎã§.";
        }
        if (getInventory(player).indexOf(item) == -1) {
            return "ÏïÑÏù¥ÌÖúÏù¥ ÏóÜÏäµÎãàÎã§.";
        }
        removeInventory(player, shop[item]["name"]);
        var sData = data(player);
        sData["BRONZE"] += shop[item]["sell"];
        var finalData = JSONClean(sData);
        FileStream.write(RPG_USER + player + ".json", finalData);
        return item + " ÏùÑ(Î•º) ÌåêÎß§ ÌïòÏÖ®ÏäµÎãàÎã§.\nÏñªÏùÄ Î∏åÎ°†Ï¶à : " + shop[item]["sell"] + " BRONZE";
    }
    if (type == "buy") {
        if (shop["buys"].indexOf(item) == -1) {
            return item + " ÏïÑÏù¥ÌÖúÏùÄ Íµ¨Îß§ Ìï†Ïàò ÏóÜÏäµÎãàÎã§.";
        }
        if (ITEM[shop[item]["name"]]["type"] == "Ïû•ÎπÑ") {
            if (getInventory(player).indexOf(ITEM[shop[item]["name"]]) != -1) {
                return "‚Äª Ïû•ÎπÑÎäî ÌïúÍ∞úÎßå ÏÜåÏú† Í∞ÄÎä• Ìï©ÎãàÎã§.\nÏ∞ΩÍ≥†Ïóê Î≥¥Í¥ÄÌïòÍ±∞ÎÇò Î≤ÑÎ†§Ï£ºÏÑ∏Ïöî.";
            }
        }
        if (shop[item]["buy"] >= pd["BRONZE"]) {
            return "Î∏åÎ°†Ï¶àÍ∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§.";
        }
        if (pd["BRONZE"] >= shop[item]["buy"]) {
            addInventory(player, item);
            var sData = data(player);
            sData["BRONZE"] -= shop[item]["buy"];
            var finalData = JSONClean(sData);
            FileStream.write(RPG_USER + player + ".json", finalData);
            return item + " ÏùÑ(Î•º) Íµ¨Îß§ ÌïòÏÖ®ÏäµÎãàÎã§.";
        }
    }
    if (type == "Î≥¥Í∏∞") {
        return "| " + place + " - ÏÉÅÏ†ê |\n( Íµ¨Îß§ Î¨ºÌíà )\n| " + shop["buys"].join("\n| ") + "\n( ÌåêÎß§ Î¨ºÌíà )\n| " + shop["sells"].join("\n| ");
    }
    if (type == "ÏïÑÏù¥ÌÖúÎ≥¥Í∏∞") {
        return "| " + item + " |\nÍµ¨Îß§Í∞Ä: " + shop[item]["buy"] + " Î∏åÎ°†Ï¶à\nÌåêÎß§Í∞Ä: " + shop[item]["sell"] + " Î∏åÎ°†Ï¶à";
    }
}

function GameToolRegister(room, msg, player, isGroupChat, replier, ImageDB, packageName, threadId) {
    if (c[player] == true) {
        if (msg == "Y") {
            rm(Config["Prefix"] + " - ÌöåÏõêÍ∞ÄÏûÖ ÏôÑÎ£å", room);
            var Inventory = ["ÎÇòÎ¨¥ Í≤Ä", "ÏßÄÎèÑ", "Ïä§ÌÖåÏù¥ÌÅ¨"];

            var PlayerData = {
                "nick": player,
                "Id": java.lang.String(ImageDB.getProfileImage()).hashCode(),
                "ATK": 10,
                "DEF": 5,
                "LEVEL": 1,
                "HP": 20,
                "MAX_HP": 20,
                "EXP": 0,
                "MAX_EXP": 100,
                "MANA": 20,
                "MAX_MANA": 20,
                "SKILLS": [],
                "XYZ": [0, 0, 0],
                "QUEST": [],
                "NOW_QUEST": "x",
                "ENTITY": [],
                "EFFECT": [],
                "PLACE": "Ïù¥Ï¶àÎßàÏùÑ",
                "GameTool": 0,
                "CRASTAL": 0,
                "DARK_CRASTAL": 0,
                "WATER_CRASTAL": 0,
                "EMERALD": 0,
                "RUBI": 0,
                "GOLD": 5,
                "SILVER": 20,
                "BRONZE": 500,
                "SP": 3,
                "ROON": {},
                "Head": {},
                "Chestplate": {},
                "Leggings": {},
                "Boots": {},
                "Hand": {},
                "HairType": "ÏùºÎ∞ò",
                "HeadType": "ÏùºÎ∞ò",
                "FIRST": time,
                "STAT": {
                    "HP": 0,
                    "DEF": 0,
                    "LUK": 0
                }
            };
            write(player, PlayerData);
            FileStream.write(RPG_USER + "INVENTORY/" + player + ".json", JSONClean(Inventory));
            FileStream.write(RPG_USER + "INVENTORY/data/" + player + ".json", JSONClean({}));
            c[player] = false;
        }
        if (msg == "N") {
            rm("ÌöåÏõêÍ∞ÄÏûÖÏù¥ Ï∑®ÏÜå ÎêòÏóàÏäµÎãàÎã§.", room);
        }
    }
    if (msg == "GÌöåÏõêÍ∞ÄÏûÖ") {
        var day = new Date();
        var year = day.getFullYear();
        var month = day.getMonth() + 1;
        var inday = day.getDate();
        var min = day.getMinutes();
        var hour = day.getHours();
        var second = day.getSeconds();

        var time = year + "ÎÖÑ " + month + "Ïõî " + inday + "Ïùº " + hour + "Ïãú " + min + "Î∂Ñ " + second + "Ï¥à";
        /*try{
        	var Playerdata = data(player);
        	var d = Playerdata["LEVEL"];
        	rm("Ïù¥ÎØ∏ ÌöåÏõêÍ∞ÄÏûÖ ÌñàÏäµÎãàÎã§. ["+d+"]", room);
        	return;
        } catch(e) {*/
        var Rule = FileStream.read(RPG_SETTING + "Rule.json");
        rm(Config["Prefix"] + " - Register" + "\n[ Í∑úÏπô ]" + blank + "\n" + Rule.join("\n\n"), room);
        rm("ÎèôÏùò Ìï® : Y | ÎèôÏùò ÌïòÏßÄ ÏïäÏùå : N\nÎèôÏùò Î∂àÍ∞ÄÏãú Í≤åÏûÑ ÌîåÎ†àÏù¥Í∞Ä Î∂àÍ∞Ä Ìï©ÎãàÎã§.", room);
        c[player] = true;
    }
}

function waitM(ms) {
    return java.lang.Thread.sleep(ms);
}

function wait(second) {
    return waitM(1000 * second);
}

function lang(msg) {
    return JSON.parse(FileStream.read(RPG_SETTING + "lang" + ".json"))[msg];
}

function EvalO(sender, room, msg, replier) {
    try {
        if (msg.indexOf("GÏã§Ìñâ") == 0 && sender == "LEAD") {
            rm("\nResult/Reply : " + eval(msg.replace("GÏã§Ìñâ", "")), room);
        }
    } catch (e) {
        var ev = msg.replace("GÏã§Ìñâ", "");
        var code = [];
        for (var i = 0; i <= ev.split("\n").length; i++) {
            code.push("| " + i + " | " + ev.split("\n")[i] + "\n" + "=-".repeat(10));
        }

        rm("\n[ Eval(ERROR) ]\nÎÇ¥Ïö© : " + e + "\nÎùºÏù∏ : " + e.lineNumber + "Ï§Ñ" + blank + "\n(B) Î¥á Ïò§Î•òÍ∞Ä ÏïÑÎãå ÎßàÏä§ÌÑ∞Ïùò ÏΩîÎìú Ïã§ÌñâÏúºÎ°ú ÎÇú Ïò§Î•ò ÏûÖÎãàÎã§.\¬∑ ÏΩîÎìú\n" + code.join("\n"), room);
    }
}

function Hair(player, type, room) {
    var symble_hair = "‚ñ†";
    var symble_hair2 = "‚ñ°";
    var hair = [];
    var symble = ["‚ñè", "‚ñé", "‚ñç", "‚ñå", "‚ñã", "‚ñä", "‚ñâ", "‚ñà"];

    // Ìó§Ïñ¥ Ïä§ÌÉÄÏùº [ ÎÇ®ÏÑ± ]

    // : ÏùºÎ∞ò :
    if (type == "ÏùºÎ∞ò") {
        hair.push(symble_hair.repeat(15));
        hair.push(symble_hair.repeat(15));
        hair.push(symble_hair.repeat(15));
        return "\n" + hair.join("\n");
    }
    // : Í∞ÄÎ•¥Îßà :
    if (type == "Í∞ÄÎ•¥Îßà") {
        hair.push(symble_hair.repeat(15));
        hair.push(symble_hair.repeat(8) + symble_hair2.repeat(7));
        hair.push(symble_hair.repeat(7) + symble_hair2.repeat(8));
        hair.push(symble_hair.repeat(6) + symble_hair2.repeat(9));
        return "\n" + hair.join("\n");
    }
    // : Î™®Ïûê :
    if (type == "Î™®Ïûê") {
        hair.push("„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§" + symble_hair.repeat(6) + "„Ö§„Ö§„Ö§„Ö§");
        hair.push("„Ö§„Ö§„Ö§„Ö§„Ö§" + symble_hair2.repeat(8) + "„Ö§„Ö§„Ö§„Ö§");
        hair.push("„Ö§„Ö§„Ö§„Ö§" + symble_hair2.repeat(10) + "„Ö§„Ö§„Ö§„Ö§");
        hair.push("„Ö§„Ö§„Ö§" + symble_hair2.repeat(12) + "„Ö§„Ö§„Ö§");
        hair.push("„Ö§„Ö§" + symble_hair2.repeat(14) + "„Ö§„Ö§");
        hair.push("„Ö§" + symble_hair2.repeat(16) + "„Ö§");
        hair.push(symble_hair.repeat(18));
        hair.push("„Ö§" + symble_hair.repeat(15));
        hair.push("„Ö§" + symble_hair.repeat(15));
        return "\n" + hair.join("\n");
    }
}

function Head(player, type) {
    var symble_hair = "‚ñ°";
    var symble_hair2 = "‚óÜ";
    var head = [];
    var symble = ["‚ñè", "‚ñé", "‚ñç", "‚ñå", "‚ñã", "‚ñä", "‚ñâ", "‚ñà"];
    if (type == "ÏùºÎ∞ò") {
        head.push(symble_hair.repeat(15));
        head.push(symble_hair.repeat(3) + "```" + symble_hair.repeat(7) + "```" + symble_hair.repeat(3));
        head.push(symble_hair.repeat(3) + "‚óè" + symble_hair.repeat(7) + "‚óè" + symble_hair.repeat(3));
        head.push(symble_hair.repeat(15));
        head.push(symble_hair.repeat(7) + "‚ñ≤" + symble_hair.repeat(7));
        head.push(symble_hair.repeat(15));
        head.push(symble_hair.repeat(5) + "-------" + symble_hair.repeat(5));
        return "\n" + head.join("\n");
    }
}

function select_battleMonster(player, mon, replier, room) {
    var md = JSON.parse(FileStream.read(MONSTER + mon + ".json"));
    var hp = objectBar(md["hp"], md["maxhp"], BAR_5);
    var exp = md["exp"];
    var nick = md["name"];
    var level = md["level"]
    var p = data(player);
    var _hp = objectBar(p["HP"], p["MAX_HP"], BAR_5);
    var title = "Œ©\n";
    var mon_battle = "LV." + level + " " + nick + " > " + "HP " + hp + "\n";
    var pla_battle = "LV." + p["LEVEL"] + " " + player + " > " + "HP " + _hp + "\n";
    var battle = title + mon_battle + pla_battle;

    mob[player] = {
        "name": md["name"],
        "maxhp": md["maxhp"],
        "level": md["level"],
        "exp": md["exp"],
        "drops": md["drops"],
        "damage": md["damage"],
        "bronze": Math.floor(Math.random() * 30) * md["level"],
        "silver": Math.floor(Math.random() * 5) * md["level"],
        "gold": Math.floor(Math.random() * 3) * md["level"]
    };
    mhp[player] = Number(md["hp"]);
rm(battle, room);
for (;;){
	Thread.sleep(1000 * 5);
if (mhp[player] >= 0){
monsterHurt(player, room);
mhp[player] -= mhp[player]/20;
}
if (0 >= mhp[player] || 0 >= p["HP"]){
	break;
}
}

}
function bar2(ex,max,type){ 
var exp=ex/max*100; 
if(exp>100) return "100Ìçº Ïù¥ÏÉÅÏûÖÎãàÎã§."; 
type=type?exp.toFixed(2)+"%":ex+"/"+max; 
exp=Math.round(exp); 
const rects = {0:"",1 : "‚ñè",2 : "‚ñé",3 : "‚ñç",4 : "‚ñå",5 : "‚ñã",6 : "‚ñä",7 : "‚ñâ",8 : "‚ñà",9 : "‚ñà"} 
return "‚ñà".repeat(exp/10)+rects[exp%10]+" ".repeat((100-exp)/10)+":"+type 
}
function battleMonster(player, room) {
    var monsters = [
        "ÌÜ†ÎÅº",
        "ÎãπÎÇòÍ∑Ä",
        "ÎèºÏßÄ"
    ];
    var mathrand = Math.floor(Math.random() * monsters.length);
    var mon = monsters[mathrand];
    var md = JSON.parse(FileStream.read(MONSTER + mon + ".json"));
    var hp = objectBar(md["hp"], md["maxhp"], BAR_5);
    var exp = md["exp"];
    var nick = md["name"];
    var level = md["level"]
    var p = data(player);
    var _hp = objectBar(p["HP"], p["MAX_HP"], BAR_5);
    var title = "Œ©\n";
    
    mob[player] = {
        "name": md["name"],
        "maxhp": md["maxhp"],
        "level": md["level"],
        "exp": md["exp"],
        "drops": md["drops"],
        "damage": md["damage"],
        "bronze": Math.floor(Math.random() * 30) * md["level"],
        "silver": Math.floor(Math.random() * 5) * md["level"],
        "gold": Math.floor(Math.random() * 3) * md["level"]
    };
    mhp[player] = Number(md["hp"]);
    
hurt[player] = md["name"];
    
    var mon_battle = "LV." + level + " " + setHealthBar(mhp[player],md["maxhp"],nick,true) + "\n";
    var pla_battle = "LV." + p["LEVEL"] + " " + setHealthBar(p["HP"],p["MAX_HP"],player,true) + "\n";
    var battle = title + mon_battle + pla_battle;
rm(battle, room);
for (;;){
	Thread.sleep(1000 * 5);
if (mhp[player] >= 0){
monsterHurt(player, room);
mhp[player] -= mhp[player]/20;
}
if (0 >= mhp[player] || 0 >= p["HP"]){
	break;
}
}
}

function infoMonster(mob, replier) {
    var mon = mob[player]["name"];
    var md = JSON.parse(FileStream.read(MONSTER + mon + ".json"));
    var battle = "[ Î™¨Ïä§ÌÑ∞ ÎèÑÍ∞ê ]\nÏù¥Î¶Ñ : " + mon + "\nÏ≤¥Î†• : " + md["hp"] + "\nÎìúÎ°≠ÌïòÎäî ÏïÑÏù¥ÌÖú : \n|" + md["drops"].join("\n| ") + "\nÎìúÎ°≠ÌïòÎäî Í≤ΩÌóòÏπò : " + md["exp"];
    replier.reply(battle);
}

function displayBattle(player) {
    var mon = mob[player]["name"];
    var md = JSON.parse(FileStream.read(MONSTER + mon + ".json"));
    var hp = objectBar(mhp[player], md["maxhp"], BAR_5);
    var exp = md["exp"];
    var nick = md["name"];
    var level = md["level"]
    var p = data(player);
    var _hp = objectBar(p["HP"], p["MAX_HP"], BAR_5);
    var title = " ".repeat(3) + "Œ©" + " ".repeat(3) + "\n";
    var mon_battle = "LV." + level + " " + setHealthBar(mhp[player],md["maxhp"],nick,true) + "\n";
    var pla_battle = "LV." + p["LEVEL"] + " " + setHealthBar(p["HP"],p["MAX_HP"],player,true) + "\n";
    var battle = title + mon_battle + pla_battle;
    return battle;
}

function monsterHurt(player, room) {
    var mon = mob[player];
    var d = mon["damage"];
    var game = data(player);
    rm(mon["name"]+" Ïù¥(Í∞Ä) "+player+" ÎãòÏùÑ Í≥µÍ≤© Ìï†Î†§Ìï©ÎãàÎã§!", room);
    java.lang.Thread.sleep(1000 * 2);
    var damage = mon["damage"];
     var RegData = data(player);
     RegData["HP"] -= damage;
     var finalData = JSONClean(RegData);
     FileStream.write(RPG_USER + player + ".json", finalData);
    rm(mon["name"]+" Ïù¥(Í∞Ä) "+player+" ÎãòÏóêÍ≤å "+damage+" Îç∞ÎØ∏ÏßÄÎ•º ÏûÖÌòîÏäµÎãàÎã§!", room);
    rm(displayBattle(player), room);
}

function playerHurt(player) {
    var mon = mob[player];
    var game = data(player);
    mhp[player] -= game["ATK"];
    if (0 >= mhp[player]) {
        var i = mon["drops"];
        var inv = JSON.parse(FileStream.read(RPG_USER + "INVENTORY/" + player + ".json"));
        var res = [];
        if (ITEM[i] !== undefined) {
            res = "ID : " + ITEM[i]["Id"] + " | " + ITEM[i]["name"];
        }
        if (ITEM[i] == undefined) {
            res = "ID : " + "?" + " | " + i;
        }
        var RegData = data(player);
        RegData["EXP"] += mon["exp"];
        RegData["BRONZE"] += mon["bronze"];
        RegData["SILVER"] += mon["silver"];
        RegData["GOLD"] += mon["gold"];
        var finalData = JSONClean(RegData);
        FileStream.write(RPG_USER + player + ".json", finalData);
        addInventory(player, i);
        mhp[player] = mon["hp"];
        return mon["name"] + " ÏùÑ(Î•º) ÏÇ¨ÎÉ• ÌïòÏòÄÏäµÎãàÎã§!\nÎ≥¥ÏÉÅ : [" + res + "]\n+ "+mon["bronze"]+" Î∏åÎ°†Ï¶à\n+ "+mon["silver"]+" Ïã§Î≤Ñ\n+ "+mon["gold"]+" Í≥®Îìú";
    }
    return "ÎÇòÏùò Í≥µÍ≤©!\n" + displayBattle(player) + "\n" + mhp[player];
}

function Heal(player){
	var g = data(player);
	if (g["SILVER"] >= 50){
		 var RegData = data(player);
		RegData["HP"] = RegData["MAX_HP"];
		 var finalData = JSONClean(RegData);
        FileStream.write(RPG_USER + player + ".json", finalData);
		return "ÌöåÎ≥µ ÌïòÏòÄÏäµÎãàÎã§.";
	}
	if (50 >= g["SILVER"]){
		return "ÌöåÎ≥µ Ìï†Î†§Î©¥ 50 Ïã§Î≤ÑÍ∞Ä ÌïÑÏöî Ìï©ÎãàÎã§.";
	}
}
function skinView(player){
	var game = data(player);
	var sk = getSkinData(player);
	var a = [
    "„Ö§" + sk[game["Skin"]]["Î®∏Î¶¨"].join("\n„Ö§„Ö§") +
    "\n„Ö§" + sk[game["Skin"]]["Î™∏ÌÜµ"].join("\n„Ö§") +
     "\n„Ö§„Ö§" + sk[game["Skin"]]["Îã§Î¶¨"].join("\n„Ö§„Ö§")
     ];
     return a.join("");
}
function GameToolInfo(player, room) {
    try {
        var Rdata = read(player);
        var game = data(player);
        rm(
            "[" + player + "] ÎãòÏùò Ï†ïÎ≥¥" +
            "\n¬∑ ÎÇ¥ ID : " + Rdata["Id"] +
            "\n¬∑ Ï≤¥Î†• : " + game["HP"] + "/" + game["MAX_HP"] +
            "\n¬∑ Î†àÎ≤® : " + game["LEVEL"] +
            "\n¬∑ ÏßÄÏó≠ : " + game["PLACE"] +
            "\n¬∑ Í≤ΩÌóòÏπò : " + game["EXP"] + "/" + game["MAX_EXP"] +
            "\n¬∑ ÎßàÎÇò : " + game["MANA"] + "/" + game["MAX_MANA"] + blank +
            "\n\n\n¬∑ Ïû•Ï∞© Ï†ïÎ≥¥" +
            "\n¬∑ Î®∏Î¶¨ : " + game["Head"] +
            "\n¬∑ Î™∏ÌÜµ : " + game["Chestplate"] +
            "\n¬∑ Îã§Î¶¨ : " + game["Leggings"] +
            "\n¬∑ Î∞ú : " + game["Boots"] +
            "\n¬∑ Î®∏Î¶¨ : " + game["Hand"] +
            "\n=< Ïä§ÌÇ® ( Î≤†ÌÉÄ ) >=" +
            "\nGÏä§ÌÇ®Î∑∞ - ÌòÑÏû¨ Ïû•Ï∞©Ìïú Ïä§ÌÇ®ÏùÑ Î¥ÖÎãàÎã§."+
            "\n¬∑ Î£¨" +
            "\nÏ∂îÍ∞Ä ÏòàÏ†ï" +
            "\n" +
            "\n[ Í≥®Îìú : " + game["GOLD"] + " /  Ïã§Î≤Ñ : " + game["SILVER"] + " ]" +
            "\n[ Œ© : " + game["GameTool"] + " / ÌÅ¨Î¶¨Ïä§ÌÉà : " + game["CRASTAL"] + " ]" +
            "\n[ Îã§ÌÅ¨ ÌÅ¨Î¶¨Ïä§ÌÉà : " + game["DARK_CRASTAL"] + " / ÏõåÌÑ∞ ÌÅ¨Î¶¨Ïä§ÌÉà : " + game["WATER_CRASTAL"] + " ]" +
            "\n[ ÏóêÎ©îÎûÑÎìú : " + game["EMERALD"] + " / Î£®ÎπÑ : " + game["RUBI"] + " ]" +
            "\n" + "\n[ Î∏åÎ°†Ï¶à : " + game["BRONZE"] + " ]", room);
        return;
    } catch (e) {
        rm("Î°úÍ∑∏Ïù∏ Ïù¥ÎÇò ÌöåÏõêÍ∞ÄÏûÖÏùÑ Ìï¥Ï£ºÏÑ∏Ïöî+", room);
        return;
    }
}

function getQuest(quest) {
    return QUEST[quest];
}

function playerQuest(player) {
    if (data(player)["NOW_QUEST"] == "x") {
        return undefined;
    }
    return getQuest(data(player)["NOW_QUEST"])["Name"];
}

function infoQuest(player) {
    Qdata = getQuest(data(player)["NOW_QUEST"]);
    info = [];
    if (Qdata["type"] == "Ïª§Îß®Îìú") {
        info.push("¬∑ Ï∂îÍ∞Ä ÏòàÏ†ï");
    }
    if (Qdata["type"] == "ÏÇ¨ÎÉ•") {
        nbt = Qdata["monster"];
        info.push("¬∑ ÌÄòÏä§Ìä∏ Î™¨Ïä§ÌÑ∞ : " + nbt["name"]);
        info.push("¬∑ ÌÄòÏä§Ìä∏ Î™¨Ïä§ÌÑ∞ ÏÇ¨ÎÉ• ÌöüÏàò : " + nbt["count"] + "Î≤à");
    }
    message = [
        "[" + Qdata["Name"] + "] ÌÄòÏä§Ìä∏Î•º ÏßÑÌñâ Ìï©ÎãàÎã§+" + blank +
        "\n¬∑ ÌÄòÏä§Ìä∏ ÏÑ§Î™Ö : " + Qdata["description"] +
        "\n¬∑ ÌÄòÏä§Ìä∏ ÌÉÄÏûÖ : " + Qdata["type"] +
        "\n¬∑ ÌÄòÏä§Ìä∏ Î≥¥ÏÉÅ : " + ITEM[Qdata["Reward"]["Item"]]["name"] + " (" + Qdata["Reward"]["Item"]["Count"] + "x)" +
        "\n¬∑ ÌÄòÏä§Ìä∏ Ï†ïÎ≥¥ > \n" + info
    ];
    return message;
}

function priceConverter(price, type, ctype) {
    if (ctype == "Î∏åÎ°†Ï¶à") {
        if (type == "Î∏åÎ°†Ï¶à") {
            p = 0;
            return Number(price * p) + " " + ctype;
        }
        if (type == "Ïã§Î≤Ñ") {
            p = 2;
            return Number(price * p) + " " + ctype;
        }
        if (type == "Í≥®Îìú") {
            p = 4;
            return Number(price * p) + " " + ctype;
        }
        if (type == "Î£®ÎπÑ") {
            p = 7;
            return Number(price * p) + " " + ctype;
        }
        if (type == "ÏóêÎ©îÎûÑÎìú") {
            p = 8;
            return Number(price * p) + " " + ctype;
        }
        if (type == "ÏûêÏàòÏ†ï") {
            p = 12;
            return Number(price * p) + " " + ctype;
        }
        if (type == "ÌÅ¨Î¶¨Ïä§ÌÉà") {
            p = 15;
            return Number(price * p) + " " + ctype;
        }
        if (type == "Îã§ÌÅ¨ ÌÅ¨Î¶¨Ïä§ÌÉà") {
            p = 21;
            return Number(price * p) + " " + ctype;
        }
        if (type == "Ïò§Î©îÍ∞Ä") {
            p = 32;
            return Number(price * p) + " " + ctype;
        }
    }
}
base64_encode = function(str) {
    var q = java.lang.String(str);
    var encodedString = java.util.Base64.getEncoder().encodeToString(q.getBytes());
    return encodedString;
}
base64_decode = function(base64str) {
    var decoded = java.util.Base64.getDecoder().decode(base64str);
    var decodedStr = new java.lang.String(decoded);
    return decodedStr;
}
MapRPG.create = function(name, entity, metadata) {
    var MapExample = {
        goto: metadata["goto"],
        npcs: metadata["npc"],
        Monster: entity,
        bgm: metadata["bgm"],
        Users: [],
        Drops: metadata["drops"],
        Metadata: base64_encode(metadata),
        npcList: metadata["npcList"]
    };
    MapExample = JSONClean(MapExample);
    FileStream.write(RPG_SETTING + "Maps/" + name + ".json", MapExample);
}
MapRPG.remove = function(name) {
    FileStream.remove(RPG_SETTING + "Maps/" + name + ".json");
}
MapRPG.read = function(name) {
    return "[ JSON Data ]\n" + FileStream.read(RPG_SETTING + "Maps/" + name + ".json");
}
MapRPG.load = function(name) {
    return JSON.parse(FileStream.read(RPG_SETTING + "Maps/" + name + ".json"));
}
MapRPG.selectMob = function(player, mob, action, replier, room) {
    if (action == "Î∞∞ÌãÄ") {
        select_battleMonster(player, mob, replier, room);
        return false;
    }
    if (action == "Ï†ïÎ≥¥") {
        infoMonster(mob, replier);
        return false;
    }
    if (!(action.indexOf(["Î∞∞ÌãÄ", "Ï†ïÎ≥¥"]) != -1)) {
        replier.reply("ÏóÜÎäî Î™ÖÎ†π ÏûÖÎãàÎã§. Î™ÖÎ†π Î¶¨Ïä§Ìä∏ : [ Î∞∞ÌãÄ / Ï†ïÎ≥¥ ]");
        return false;
    }
}
MapRPG.selectNPC = function(player, npc, action, replier) {
    var npc = MapRPG.load(data(player)["PLACE"])["npcs"][npc];
    var messageR = Math.floor(Math.random() * npc["message"].length);
    var message = npc["message"][messageR];
    if (action == "ÎßêÍ±∏Í∏∞") {
        replier.reply(npc["name"] + ": " + message);
        return;
    } else if (action == "ÏàòÎ¶¨") {
        if (npc["type"] == "ÎåÄÏû•Ïû•Ïù¥") {
            replier.reply("ÏàòÎ¶¨Î•º ÌïòÍ≥† Ïã∂ÏßÄÎßå Í∞úÎ∞úÏ§ëÏù¥ÎÑ§..");
            return;
        }
        if (npc["type"] !== "ÎåÄÏû•Ïû•Ïù¥") {
            replier.reply("Ïù¥ NPCÎäî ÏàòÎ¶¨ Í¥ÄÎ†® NPCÍ∞Ä ÏïÑÎãôÎãàÎã§.");
            return;
        }
    }
    if (!(action.indexOf(["ÏàòÎ¶¨", "ÎßêÍ±∏Í∏∞"]) != -1)) {
        replier.reply("GnpcÏÑ†ÌÉù [Ïù¥Î¶Ñ] [ÎßêÍ±∏Í∏∞/ÏàòÎ¶¨]");
        return;
    }
}
MapRPG.mapExist = function(name) {
    var b = new java.io.File(sdcard + RPG_SETTING + "Maps/" + name + ".json");
    if (!(b.exists())) return "no";
    if (b.exists()) return "yes";
}
MapRPG.info = function(name) {
    var mapData = MapRPG.load(name);
    var goto = "¬∑ Í∞àÏàò ÏûàÎäî Í≥≥ \n" + mapData["goto"].join("\n| ");
    var npcPrefix = "\n\n[ NPC (" + Number(mapData["npcList"].length) + ") ]\n";
    var npc2 = [];
    for (var i = 0; i < mapData["npcList"].length; i++) {
        npc2.push("\n| [ ID : " + i + " ] [ " + mapData["npcs"][mapData["npcList"][i]]["type"] + " ] " + mapData["npcs"][mapData["npcList"][i]]["name"]);
    }
    var npc = npcPrefix + npc2.join("\n");
    var monster = "\n\n[ Î™¨Ïä§ÌÑ∞ (" + mapData["Monster"].length + ") ]\n| " + mapData["Monster"].join("\n| ");
    var bgm = "\n\n[ BGM : " + mapData["bgm"] + " ]";
    var drops = "\nÎñ®Ïñ¥ÏßÑ ÏïÑÏù¥ÌÖú (" + mapData["Drops"].length + ") : \n| " + mapData["Drops"].join("\n| ");
    var form = "[ " + name + " ]\n" + goto + npc + monster + drops + bgm;
    return form;
}

MapRPG.createBiome = function(type) {
    var seed = Math.floor(Math.random() * 0x7FFFFFFFFFFFFFFFF);
    var percent = Math.floor(Math.random() * 100);
    /* 0.15ÎèÑ */
    var snow_temp = 0.15;
    var snowBiome = [
        "ÏñºÏùå ÌèâÏõê",
        "ÏñºÏùå ÏÇ∞",
        "ÏñºÏùå Í∞ï",
        "Ï∞®Í∞ÄÏö¥ Ìï¥Î≥Ä",
        "Ï∞®Í∞ÄÏö¥ ÌÉÄÏù¥Í∞Ä",
        "Ï∞®Í∞ÄÏö¥ ÌÉÄÏù¥Í∞Ä Í≥†Ïõê",
        "Ï∞®Í∞ÄÏö¥ Î©îÍ∞Ä ÌÉÄÏù¥Í∞Ä"
    ];
    /* 0.5ÎèÑ */
    var water_temp = 0.5;
    var waterBiome = [
        "Í∞ï",
        "Î∞îÎã§",
        "ÍπäÏùÄ Î∞îÎã§"
    ];

    /* 0.6ÎèÑ */
    var birch_temp = 0.6;
    var birchBiome = [
        "ÏûêÏûë ÎÇòÎ¨¥ Ïà≤",
        "ÏûêÏûë ÎÇòÎ¨¥ Ïà≤ Í≥†Ïõê",
        "Î©îÍ∞Ä ÏûêÏûë ÎÇòÎ¨¥ Ïà≤",
        "Î©îÍ∞Ä ÏûêÏûë ÎÇòÎ¨¥ Ïà≤ Í≥†Ïõê"
    ];

    /* 0.7 ~ 1.5*/
    var normal_temp = 0.7;
    var normalBiome = [
        "Îì§Ìåê",
        "Í≥†Ïõê",
        "ÍΩÉ Îì§Ìåê",
        "Ìï¥Î≥Ä"
    ];
    var desert_temp = 1.5;
    var desertBiome = [
        "Î™®Îûò ÏÇ¨Ïû•",
        "ÏÇ¨Îßâ",
        "Î©îÏÇ¨"
    ];

    var Biomes = [
        "Ï†àÎ≤Ω",
        "ÏÇ∞",
        "Ìò∏Ïàò",
        "Ìï¥Î≥Ä",
        "ÌÉÄÏù¥Í∞Ä",
        "ÌÉÄÏù¥Í∞Ä Í≥†Ïõê",
        "Î©îÍ∞Ä ÌÉÄÏù¥Í∞Ä",
        "Í∞ï",
        "Î∞îÎã§",
        "ÍπäÏùÄ Î∞îÎã§",
        "ÏûêÏûë ÎÇòÎ¨¥ Ïà≤",
        "ÏûêÏûë ÎÇòÎ¨¥ Ïà≤ Í≥†Ïõê",
        "Î©îÍ∞Ä ÏûêÏûë ÎÇòÎ¨¥ Ïà≤",
        "Î©îÍ∞Ä ÏûêÏûë ÎÇòÎ¨¥ Ïà≤ Í≥†Ïõê",
        "Îì§Ìåê",
        "Í≥†Ïõê",
        "ÍΩÉ Îì§Ìåê",
        "Ìï¥Î≥Ä",
        "Î™®Îûò ÏÇ¨Ïû•",
        "ÏÇ¨Îßâ",
        "Î©îÏÇ¨"
    ];

    /* Biomes.push(snowBiome);
    Biomes.push(waterBiome);
    Biomes.push(birchBiome);
    Biomes.push(normalBiome);
    Biomes.push(desertBiome); */

    if (type == "ÎûúÎç§") {
        var BiomeLength = Biomes.length;
        var BiomeRand = Math.floor(Math.random() * BiomeLength);
        var info = [{
                "seed": seed
            },
            {
                "biome": Biomes[BiomeRand]
            },
            {
                "temp": Math.floor(Math.random() * 45)
            },
            {
                "chunk": Math.floor(Math.random() * 16)
            }
        ];
        info = JSONClean(info);
        FileStream.write(RPG_SETTING + "Biomes/" + seed + ".json", info);
        return seed + "\n" + MapRPG.readBiome(seed);
    }
    var info = [{
            "seed": seed
        },
        {
            "biome": type
        },
        {
            "temp": Math.floor(Math.random() * 45)
        },
        {
            "chunk": Math.floor(Math.random() * 16)
        }
    ];
    info = JSONClean(info);
    FileStream.write(RPG_SETTING + "Biomes/" + seed + ".json", info);
    return seed + "\n" + MapRPG.readBiome(seed);
}
MapRPG.saveBiome = function(saveData, seed) {
    saveData = JSONClean(saveData);
    FileStream.write(RPG_SETTING + "Biomes/" + seed + ".json", saveData);
    return MapRPG.readBiome(seed);
}
MapRPG.readBiome = function(seed) {
    return FileStream.read(RPG_SETTING + "Biomes/" + seed + ".json");
}
MapRPG.loadBiome = function(seed) {
    return JSON.parse(FileStream.read(RPG_SETTING + "Biomes/" + seed + ".json"));
}

function randombyte(length) {
    var result = '';
    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789„Ñ±„Ñ¥„Ñ∑„Ñπ„ÖÅ„ÖÇ„ÖÖG„Öà„Öä„Öã„ÖÅ„Öç„Öé„Öè„Öê„Öë„Öí„Öì„Öî„Öï„Öñ„Öó„Öò„Öô„Öö„Öõ„Öú„Öù„Öû„Öü„Ö†„Ö°„Ö¢„Ö£‚òÖ‚ô•‚ô°%&√ó√∑=<>@#~^*+-_()!:;?‚òÜ‚ô§‚óÜ‚òé‚òú‚ô™Œ±‚ìí{}$Ôø¶‚óé‚Äª‚àöœÄ‚Üí‚Üê[]`|¬∞¬∑';
    var charactersLength = characters.length;
    for (var i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
}

function stopQuest(player, quest, room) {
    rm("Ï∂îÍ∞Ä ÏòàÏ†ï", room);
}

function Nogada(player, room) {
    money = Math.floor(Math.random() * 300);
    var RegData = data(player);
    RegData["BRONZE"] += money;
    var finalData = JSONClean(RegData);
    FileStream.write(RPG_USER + player + ".json", finalData);
    rm("ÎÖ∏Í∞ÄÎã§Î°ú " + money + " Î∏åÎ°†Ï¶àÎ•º ÏñªÏóàÏäµÎãàÎã§.", room);
}

function Nodong(player, room) {
	if (player == "Ï¥àÎ°±Ïù¥"){
		return;
	}
    money = Math.floor(Math.random() * 10);
    var RegData = data(player);
    RegData["SILVER"] += money;
    var finalData = JSONClean(RegData);
    FileStream.write(RPG_USER + player + ".json", finalData);
    rm("ÏùºÏùÑ ÌïòÏó¨ " + money + " Ïã§Î≤ÑÎ•º ÏñªÏóàÏäµÎãàÎã§.", room);
}

function LevelUp(player, room) {
    var regData = data(player);
    var ÌïÑÏöîÌïú_EXP = regData["LEVEL"] * 75;
    if (ÌïÑÏöîÌïú_EXP >= regData["EXP"]) {
        rm("\n| ÏïåÎ¶º |\n¬∑ ÎãπÏã†Ïùò EXPÍ∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§.\nÌïÑÏöîÌïú EXP : " + Number(ÌïÑÏöîÌïú_EXP - regData["EXP"]), room);
    }
    if (regData["EXP"] >= ÌïÑÏöîÌïú_EXP) {
        var backLevel = regData["LEVEL"];
        if (regData["EXP"] >= ÌïÑÏöîÌïú_EXP){
        var sData = data(player);
        sData["LEVEL"] += 1;
        sData["EXP"] -= ÌïÑÏöîÌïú_EXP;
        sData["MAX_EXP"] = regData["LEVEL"] + 1 * 75;
        sData["MAX_HP"] += 5;
        sData["MAX_MANA"] += 5;
        sData["DEF"] += 1;
        sData["ATK"] += 2;
        var finalData = JSONClean(sData);
        FileStream.write(RPG_USER + player + ".json", finalData);
        rm("\n| ÏïåÎ¶º |\n¬∑ " + backLevel + " -> " + sData["LEVEL"], room);
        }
    }
}

function startQuest(player, quest, room) {
    Qdata = getQuest(quest);
    info = [];
    if (Qdata["type"] == "Ïª§Îß®Îìú") {
        info.push("¬∑ Ï∂îÍ∞Ä ÏòàÏ†ï");
    }
    if (Qdata["type"] == "ÏÇ¨ÎÉ•") {
        nbt = Qdata["monster"];
        info.push("¬∑ ÌÄòÏä§Ìä∏ Î™¨Ïä§ÌÑ∞ : " + nbt["name"]);
        info.push("¬∑ ÌÄòÏä§Ìä∏ Î™¨Ïä§ÌÑ∞ ÏÇ¨ÎÉ• ÌöüÏàò : " + nbt["count"] + "Î≤à");
    }
    user(player, "NOW_QUEST", quest);
    rm("[" + Qdata["Name"] + "] ÌÄòÏä§Ìä∏Î•º ÏßÑÌñâ Ìï©ÎãàÎã§+" + blank +
        "\n¬∑ ÌÄòÏä§Ìä∏ ÏÑ§Î™Ö : " + Qdata["description"] +
        "\n¬∑ ÌÄòÏä§Ìä∏ ÌÉÄÏûÖ : " + Qdata["type"] +
        "\n¬∑ ÌÄòÏä§Ìä∏ Î≥¥ÏÉÅ : " + ITEM[Qdata["Reward"]["Item"]]["name"] + " (" + Qdata["Reward"]["Item"]["Count"] + "x)" +
        "\n¬∑ ÌÄòÏä§Ìä∏ Ï†ïÎ≥¥ > \n" + info,
        room);
}
/*
{
   "Monster_example":{
      "Name": "ÏòàÏ†ú_Î™¨Ïä§ÌÑ∞",
      "description": "Description.",
      "type": "ÏÇ¨ÎÉ•",
      "monster": [
         "name": "Í∞úÎØ∏",
         "count": 10,
      ],
      "Reward": [
         "Item":"ÎÇòÎ¨¥ Ï°∞Í∞Å",
         "Count": 3
      ]
   }   
}
*/
function getDataInventory(player) {
    return JSON.parse(FileStream.read(RPG_USER + "INVENTORY/data/" + player + ".json"));
}

function Enchant(player, item, ench, enchLvl) {
    var IDATA = getDataInventory(player);
    if (IDATA[item]["ench"] == undefined) {
        IDATA[item]["ench"] = [];
        IDATA[item]["ench"].push(ench + ":" + enchLvl);
        FileStream.write(RPG_USER + "INVENTORY/data/" + player + ".json", JSONClean(IDATA));
        return "\n- - - - - - - - - - -\n| Ïù∏ Ï±à Ìä∏ |\n¬∑ " + ITEM[item]["name"] + "+ Ïù∏Ï±àÌä∏ - " + ench + "\n- - - - - - - - - - -";
    }
    if (IDATA[item]["ench"] !== undefined) {
        IDATA[item]["ench"].push(ench + ":" + enchLvl);
        FileStream.write(RPG_USER + "INVENTORY/data/" + player + ".json", JSONClean(IDATA));
        return "\n- - - - - - - - - - -\n| Ïù∏ Ï±à Ìä∏ |\n¬∑ " + ITEM[item]["name"] + "+ Ïù∏Ï±àÌä∏ - " + ench + "\n- - - - - - - - - - -";
    }
    return "\n- - - - - - - - - - -\n| Ïù∏ Ï±à Ìä∏ |\n¬∑ " + ITEM[item]["name"] + "+ Ïù∏Ï±àÌä∏ - " + ench + "\n- - - - - - - - - - -";
}
function Skin(room, msg, sender, isGroupChat, replier, ImageDB, packageName, threadId) {
	if (skinCreate[sender] !== undefined){
		if (msg.length > 15 && skinType[sender] == "Î®∏Î¶¨"){
			replier.reply("ÏµúÎåÄ 15Ïπ∏ÍπåÏßÄÎßå Í∞ÄÎä•Ìï©ÎãàÎã§.");
			return;
		}
		if (msg.length > 17 && skinType[sender] == "Îã§Î¶¨"){
			replier.reply("ÏµúÎåÄ 17Ïπ∏ÍπåÏßÄÎßå Í∞ÄÎä•Ìï©ÎãàÎã§.");
			return;
		}
		if (msg.length > 32 && skinType[sender] == "Î™∏ÌÜµ"){
			replier.reply("ÏµúÎåÄ 32Ïπ∏ÍπåÏßÄÎßå Í∞ÄÎä•Ìï©ÎãàÎã§.");
			return;
		}
		if(msg == "GÎã§Ïùå"){
			if (skinType[sender] == "Î®∏Î¶¨"){
			skinType[sender] = "Î™∏ÌÜµ";
			replier.reply("Îã§Ïùå Î∂ÄÏúÑÎäî Î™∏ÌÜµ ÏûÖÎãàÎã§.");
			return;
			}
			if (skinType[sender] == "Î™∏ÌÜµ"){
			skinType[sender] = "Îã§Î¶¨";
			replier.reply("Îã§Ïùå Î∂ÄÏúÑÎäî Îã§Î¶¨ ÏûÖÎãàÎã§.");
			return;
			}
			if (skinType[sender] == "Îã§Î¶¨"){
	var RegData = JSON.parse(FileStream.read(RPG_USER + "SKINS/" + sender + ".json"));
	var a = skin[sender]["Ïù¥Î¶Ñ"];
    RegData[a] = {};
    RegData[a]["Î®∏Î¶¨"] = skin[sender]["Î®∏Î¶¨"];
    RegData[a]["Î™∏ÌÜµ"] = skin[sender]["Î™∏ÌÜµ"];
    RegData[a]["Îã§Î¶¨"] = skin[sender]["Îã§Î¶¨"];
    var finalData = JSONClean(RegData);
    FileStream.write(RPG_USER + "SKINS/" + sender + ".json", finalData);
			skinCreate[sender] = undefined;
			replier.reply("ÎÅù ÏûÖÎãàÎã§!");
			replier.reply("¬∑ ÎØ∏Î¶¨Î≥¥Í∏∞"+blank+"\n\n\n¬∑ Î®∏Î¶¨\n"+skin[sender]["Î®∏Î¶¨"].join("\n")+"\n¬∑ Î™∏ÌÜµ\n"+skin[sender]["Î™∏ÌÜµ"].join("\n")+"\n¬∑ Îã§Î¶¨\n"+skin[sender]["Îã§Î¶¨"].join("\n"));
			return;
			}
			
		}
		if (msg.indexOf("GÏä§ÌÇ®Î∂ÄÏúÑ")==0){
		var args = msg.split(" ");
		if (args[1].indexOf(["Î®∏Î¶¨","Î™∏ÌÜµ","Îã§Î¶¨"])== -1){
			replier.reply("Î∂ÄÏúÑÎäî Î®∏Î¶¨,Î™∏ÌÜµ,Îã§Î¶¨ Î∞ñÏóê ÏóÜÏäµÎãàÎã§.");
			return;
		} else {
			skinType[sender] = args[1];
			return;
		}
	}
	if (msg == "GÏä§ÌÇ®Î∞±"){
		skin[sender][skinType[sender]].pop();
		replier.reply("Ïä§ÌÇ®ÏùÑ ÎêòÎèåÎ†∏ÏäµÎãàÎã§.");
		replier.reply("[ Ïä§ÌÇ® ÌòÑÌô© ]\nÎ∂ÄÏúÑ : "+skinType[sender]+"\n"+skin[sender][skinType[sender]].join("\n"));
		return;
	}
		skin[sender][skinType[sender]].push(msg);
		replier.reply("[ Ïä§ÌÇ® ÌòÑÌô© ]\nÎ∂ÄÏúÑ : "+skinType[sender]+"\n"+skin[sender][skinType[sender]].join("\n"));
	}
	if (msg.indexOf("GÏä§ÌÇ®Ï†úÏûë")==0){
	try {
	var RegData = JSON.parse(FileStream.read(RPG_USER + "SKINS/" + sender + ".json"));
	var a = msg.substr(6);
	if (a == ""){
		replier.reply("GÏä§ÌÇ®Ï†úÏûë (Ïä§ÌÇ® Ïù¥Î¶Ñ)");
		return;
	}
    RegData[a] = {};
    RegData[a]["Î®∏Î¶¨"] = [];
    RegData[a]["Î™∏ÌÜµ"] = [];
    RegData[a]["Îã§Î¶¨"] = [];
    var finalData = JSONClean(RegData);
    FileStream.write(RPG_USER + "SKINS/" + sender + ".json", finalData);
    skin[sender] = {};
    skin[sender]["Î®∏Î¶¨"] = [];
    skin[sender]["Î™∏ÌÜµ"] = [];
    skin[sender]["Îã§Î¶¨"] = [];
    skin[sender]["Ïù¥Î¶Ñ"] = a;
    
    skinCreate[sender] = true;
    skinType[sender] = "Î®∏Î¶¨";
    replier.reply("Ïä§ÌÇ® Ï†úÏûëÏùÑ ÏãúÏûëÌï©ÎãàÎã§.\nGÎã§Ïùå Î•º Ïù¥Ïö©ÌïòÏó¨ ÎßàÏùåÍ≤É Ï†úÏûëÌï¥Î≥¥ÏÑ∏Ïöî!\nÏ±ÑÌåÖ ÏûÖÎ†•ÏúºÎ°ú ÎßåÎì§Ïàò ÏûàÏäµÎãàÎã§.\nÌïúÎ≤à ÏûÖÎ†•Ïù¥ Ïä§ÌÇ®Ïùò ÌïúÏ§Ñ ÏûÖÎãàÎã§.");
    return;
	} catch (e) {
		replier.reply("Ï≤òÏùå ÎßåÎìúÏÖîÏÑú Îã§Ïãú ÏûÖÎ†• ÌïòÏÖîÏïºÎê©ÎãàÎã§.");
		FileStream.write(RPG_USER + "SKINS/" + sender + ".json", JSONClean({}));
		return;
		}
	}
	if (msg.indexOf("GÏä§ÌÇ®Ïû•Ï∞©")==0){
	var RegData = JSON.parse(FileStream.read(RPG_USER + "SKINS/" + sender + ".json"));
	var a = msg.substr(6);
	if (a == ""){
		replier.reply("GÏä§ÌÇ®Ïû•Ï∞© (Ïä§ÌÇ® Ïù¥Î¶Ñ)");
		return;
	}
	if (RegData[a] == undefined){
		replier.reply("ÏóÜÎäî Ïä§ÌÇ® ÏûÖÎãàÎã§.");
		return;
	}
	var sData = data(sender);
	sData["Skin"] = a;
	var finalData = JSONClean(sData);
    FileStream.write(RPG_USER + sender + ".json", finalData);
	replier.reply("Ïû•Ï∞©ÏùÑ ÏôÑÎ£å ÌïòÏòÄÏäµÎãàÎã§.");
	return;
	}
	if (msg == "GÏä§ÌÇ®Î∑∞"){
		try {
			replier.reply("¬∑ Ïä§ÌÇ® : "+data(sender)["Skin"]+"\n\n"+skinView(sender));
			return;
			} catch (e) {
				replier.reply("ÎãπÏã†ÏùÄ Ïä§ÌÇ®Ïù¥ ÏóÜÏäµÎãàÎã§.\n"+e+"\n"+e.lineNumber+" Line");
				return;
			}
		}
}
function getSkinData(player){
	return JSON.parse(FileStream.read(RPG_USER + "SKINS/" + player + ".json"));
}
function response(room, msg, sender, isGroupChat, replier, ImageDB, packageName, threadId) {
    var Data = msg.split(" ");
     Skin(room, msg, sender, isGroupChat, replier, ImageDB, packageName, threadId);
    GameToolRegister(room, msg, sender, isGroupChat, replier, ImageDB, packageName, threadId);
    //PartyPro(room, msg, sender, isGroupChat, replier, ImageDB, packageName, threadId);
    if (msg == "GÏù∏Î≤§ÌÜ†Î¶¨Îç∞Ïù¥ÌÑ∞Í≥†ÏπòÍ∏∞") {
        FileStream.write(RPG_USER + "INVENTORY/data/" + sender + ".json", JSONClean({}));
        replier.reply("ÏïÑÏù¥ÌÖú NBT Îç∞Ïù¥ÌÑ∞Í∞Ä Ï†ÅÏö©ÎêòÎèÑÎ°ù Í≥†Ï≥êÏ°åÏäµÎãàÎã§.");
    }
    if (msg == "GÌûê"){
    	replier.reply(Heal(sender));
    }
    if (msg.indexOf("GÌåêÎß§") == 0) {
        var args = msg.split(" ");
        if (args[1] == undefined) {
            replier.reply("GÌåêÎß§ (ÏïÑÏù¥ÌÖú Ïù¥Î¶Ñ)");
        }
        if (args[1] !== undefined) {
            var a = msg.replace("GÌåêÎß§ ", "");
            replier.reply(seeShop(sender, "sell", a));
        }
    }
    if (msg.indexOf("GÎ≤ÑÎ¶¨Í∏∞") == 0) {
        var args = msg.replace("GÎ≤ÑÎ¶¨Í∏∞ ", "");
        if (getInventory(sender).indexOf(args) == -1) {
            replier.reply(args + " ÏïÑÏù¥ÌÖúÏùÄ ÏóÜÏäµÎãàÎã§.");
            return;
        }
        removeInventory(sender, args);
        replier.reply(args + " ÏïÑÏù¥ÌÖúÏùÑ Î≤ÑÎ†∏ÏäµÎãàÎã§.");
    }
    if (msg.indexOf("GÏû•Ï∞©") == 0) {
        var args = msg.split("::");
        var arg = msg.split(" ");
        if (args[1] == undefined || arg[1] == undefined) {
            replier.reply("GÏû•Ï∞©::[ÏÜê/Î®∏Î¶¨/Î™∏ÌÜµ/Îã§Î¶¨/Î∞ú] [Ïû•Ï∞©Ìï† ÏïÑÏù¥ÌÖú]");
        }
        if (args[1] !== undefined && arg[1] !== undefined) {
            var t = msg.replace("GÏû•Ï∞©::"+args[1]+" ", "");
            replier.reply(Equipment(sender, args[1], t));
        }
    }
    if (msg.indexOf("GÍµ¨Îß§") == 0) {
        var args = msg.split(" ");
        if (args[1] == undefined) {
            replier.reply("GÍµ¨Îß§ (ÏïÑÏù¥ÌÖú Ïù¥Î¶Ñ)");
        }
        if (args[1] !== undefined) {
            var a = msg.replace("GÍµ¨Îß§ ", "");
            replier.reply(seeShop(sender, "buy", a));
        }
    }
    if (msg == "GÏÉÅÏ†ê") {
        replier.reply(seeShop(sender, "Î≥¥Í∏∞", "null"));
    }
    if (msg.indexOf("GÏÉÅÏ†êÎ≥¥Í∏∞") == 0) {
        var args = msg.split(" ");
        if (args[1] == undefined) {
            replier.reply("GÏÉÅÏ†êÎ≥¥Í∏∞ (ÏïÑÏù¥ÌÖú Ïù¥Î¶Ñ)");
        }
        if (args[1] !== undefined) {
            var arg = msg.replace("GÏÉÅÏ†êÎ≥¥Í∏∞ ", "");
            replier.reply(seeShop(sender, "ÏïÑÏù¥ÌÖúÎ≥¥Í∏∞", arg));
        }
    }
    if (msg.indexOf("GÏïÑÏù¥ÌÖúÎ≥¥Í∏∞") == 0) {
        var args = msg.replace("GÏïÑÏù¥ÌÖúÎ≥¥Í∏∞ ", "");
        replier.reply(getItemInfo(args));
    }
    if (msg.indexOf("GÍ≥ÑÏÇ∞") == 0) {
        replier.reply("* Í≥ÑÏÇ∞ Í≤∞Í≥º\n" + calculator(msg.replace("GÍ≥ÑÏÇ∞ ", "")));
    }
    if (msg == "GÎèÑÏõÄÎßê") {
        replier.reply("[ ÎèÑÏõÄÎßê ]" + blank + HELP);
    }
    if (msg == "GÌöåÏõêÍ∞ÄÏûÖ") {
        GameToolRegister(sender, room, ImageDB);
    }
    if (msg == "GÎÇ¥Ï†ïÎ≥¥") {
        GameToolInfo(sender, room);
    }
    if (msg == "GÏù∏Î≤§ÌÜ†Î¶¨") {
        GameToolInventory(sender, room);
    }
    if (msg == "GÎ†àÎ≤®ÏóÖ") {
        LevelUp(sender, room);
    }
    if (msg == "GÌÄòÏä§Ìä∏") {
        args = msg.split(" ");

        questHelp = [
            "¬∑ GÌÄòÏä§Ìä∏ Ï†ïÎ≥¥ - ÌÄòÏä§Ìä∏ Ï†ïÎ≥¥Î•º ÌôïÏù∏ Ìï©ÎãàÎã§.",
            "¬∑ GÌÄòÏä§Ìä∏ Ìè¨Í∏∞ - ÌÄòÏä§Ìä∏Î•º Ìè¨Í∏∞ Ìï©ÎãàÎã§."
        ];

        rm(questHelp.join("\n"), room);
    }
    if (msg == "GÎÖ∏Í∞ÄÎã§") {
        Nogada(sender, room);
    }
    if (msg == "GÏùº") {
        Nodong(sender, room);
    }
    if (msg == "GÏÇ¨ÎÉ•") {
        battleMonster(sender, room);
    }
    if (msg == "GÍ≥µÍ≤©") {
        replier.reply(playerHurt(sender));
    }
    if (msg == "GÏÇ¨ÎÉ•ÏÉÅÌô©") {
        replier.reply(displayBattle(sender));
    }
    if (msg.indexOf("GÎßµÏ†ïÎ≥¥") == 0) {
        var args = msg.substr(5);
        try {
            replier.reply(MapRPG.info(args));
        } catch (e) {
            rm(args + " ÏßÄÏó≠ÏùÄ ÏóÜÏäµÎãàÎã§.", room);
        }
    }
    if (msg.indexOf("GÎ™πÏÑ†ÌÉù") == 0) {
        var args = msg.split(" ");
        if (MapRPG.load(data(sender)["PLACE"])["Monster"].indexOf(args[1]) != -1) {
            MapRPG.selectMob(sender, args[1], args[2], replier);
        }
        if (!(MapRPG.load(data(sender)["PLACE"])["Monster"].indexOf(args[1]) != -1)) {
            replier.reply(args[1] + " Îäî(ÏùÄ) ÏóÜÎäî Î™¨Ïä§ÌÑ∞ ÏûÖÎãàÎã§.");
        }
    }
    if (msg.indexOf("GÏóîÌîºÏãúÏÑ†ÌÉù") == 0) {
        var args = msg.split(" ");
        if (MapRPG.load(data(sender)["PLACE"])["npcList"].indexOf(args[1]) != -1) {
            MapRPG.selectNPC(sender, args[1], args[2], replier);
        }
        if (!(MapRPG.load(data(sender)["PLACE"])["npcList"].indexOf(args[1]) != -1)) {
            replier.reply(args[1] + " Îäî(ÏùÄ) ÏóÜÎäî NPC ÏûÖÎãàÎã§.");
        }
    }
    if (msg.indexOf("GÏù¥Îèô") == 0) {
        var args = msg.substr(4);
        try {
            if (MapRPG.load(data(sender)["PLACE"])["goto"].indexOf(args) == -1) {
                rm("Ìï¥Îãπ ÏßÄÏó≠ÏóêÎäî Í∞àÏàò ÏóÜÏäµÎãàÎã§.", room);
            }
            if (MapRPG.load(data(sender)["PLACE"])["goto"].indexOf(args) != -1) {
                rm(args + " ÏßÄÏó≠ÏúºÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§!...", room);
                java.lang.Thread.sleep(1000 * 3);
                rm("@" + sender + " | ÏßÄÏó≠Ïóê ÎèÑÏ∞©ÌñàÏäµÎãàÎã§!", room);
                replier.reply(MapRPG.info(args));
                var RegData = data(sender);
                RegData["PLACE"] = args;
                var finalData = JSONClean(RegData);
                FileStream.write(RPG_USER + sender + ".json", finalData);
            }
        } catch (e) {
            rm(args + " ÏßÄÏó≠ÏùÄ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§.\n" + e + "\n" + e.lineNumber + "Ï§Ñ", room);
            FileStream.remove(RPG_SETTING + "Maps/" + args + ".json");
        }
    }
}
NBT.create = function(metadata) {
    return base64_encode(metadata);
}
NBT.get = function(metadata) {
    return base64_decode(metadata);
}

JSONClean = function(jsObj) {
    return JSON.stringify(jsObj, null, "\t");
}

itemCreate = function(name, metadata) {
    var itemData = JSON.parse(FileStream.read(RPG_SETTING + "items.json"));
    itemData[name] = metadata;
    var finalData = JSONClean(itemData);
    FileStream.write(RPG_SETTING + "items.json", finalData);
}
mapCreate = function(name, metadata) {
    var mapData = {};
    mapData[name] = metadata;
    var finalData = JSONClean(mapData);
    FileStream.write(RPG_SETTING + "Maps/" + name + ".json", finalData);
}
/*
var name = "???";
var meta = {};
var go = [];
var bgm = "";
var npcList = [];
var mon = [];
meta["goto"] = go;
meta["bgm"] = bgm;
meta["npcList"] = npcList;
meta["Users"] = [];
meta["Drops"] = [];
meta["Monster"] = mon;
meta["npcs"] = {};
meta["Metadata"] = base64_encode(meta);
mapCreate(name, meta);
*/
function onStartCompile(){
	rm("Reloaded.");
}
